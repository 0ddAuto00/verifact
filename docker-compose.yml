x-app-common: &app-common
  build:
    context: .
    dockerfile: Dockerfile
  restart: unless-stopped
  volumes:
    - ./configs:/app/configs
  env_file:
    - .env
  depends_on:
    verifact-redis:
      condition: service_healthy

x-app-dev: &app-dev
  <<: *app-common
  build:
    context: .
    dockerfile: Dockerfile
  volumes:
    - .:/app
    - ./configs:/app/configs
    - ./entrypoint.sh:/app/entrypoint.sh
  environment:
    - ENVIRONMENT=development

x-app-prod: &app-prod
  <<: *app-common
  environment:
    - ENVIRONMENT=production
  deploy:
    resources:
      limits:
        cpus: "2"
        memory: 2G
  logging:
    driver: "json-file"
    options:
      max-size: "20m"
      max-file: "5"

services:
  # VeriFact UI service (Chainlit)
  verifact-ui:
    <<: *app-dev
    command: ui
    ports:
      - "8501:8501"
    environment:
      - CHAINLIT_HOST=0.0.0.0
      - CHAINLIT_PORT=8501
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@verifact-redis:6379/0
      - REDIS_ENABLED=true
      - DB_POOL_MIN_SIZE=2
      - DB_POOL_MAX_SIZE=5
      - DB_POOL_MAX_IDLE_TIME=300
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # VeriFact API service (FastAPI)
  verifact-api:
    <<: *app-dev
    command: api
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@verifact-redis:6379/0
      - REDIS_ENABLED=true
      - EVIDENCE_CACHE_TTL=86400
      - DB_POOL_MIN_SIZE=2
      - DB_POOL_MAX_SIZE=10
      - DB_POOL_MAX_IDLE_TIME=300
      - DB_COMMAND_TIMEOUT=60.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis for caching
  verifact-redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD:-}",
        "--maxmemory",
        "256mb",
        "--maxmemory-policy",
        "allkeys-lru",
        "--appendonly",
        "yes",
      ]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 384M

volumes:
  redis-data:
# Production configuration in a separate file
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
